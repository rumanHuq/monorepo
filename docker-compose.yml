# #HOST_PORT:DOCKER_PORT

version: "2.4"
services:
  #############################################################################
  frontend:
    container_name: "MONO_FRONTEND"
    tty: true
    build:
      context: .
      dockerfile: ./frontend/Dockerfile
      target: dev
    environment:
      - HOST_BACKEND=backend
      - NODE_ENV=development
    volumes:
      - ./common:/app/common
      - ./.vscode:/app/.vscode
      - ./package.json:/app/package.json
      - ./babel.config.js:/app/babel.config.js
      - ./.eslintrc.js:/app/.eslintrc.js
      - ./tsconfig.json:/app/tsconfig.json
      - ./frontend:/app/frontend:rw
      - frontend-deps:/app/node_modules
      - frontend-nested-deps:/app/frontend/node_modules
    # labels:
    #   # Route config
    #   - "traefik.http.routers.fe-router.rule=Host(`ruman.fi`,`ruman.com`)"
    #   # https setting, with certificate
    #   # - "traefik.http.routers.fe-router.tls.certresolver=fe-cert"
    #   # - "traefik.http.routers.fe-router.entrypoints=websecure"
    #   # - "traefik.http.services.fe-service.loadbalancer.server.port=8090"
    #   - "traefik.enable=true"
    ports:
      - 1111:1111
  #############################################################################
  backend:
    tty: true
    container_name: "MONO_BACKEND"
    build:
      context: .
      dockerfile: ./backend/Dockerfile
      target: dev
    environment:
      - HOST_DB=database
      - NODE_ENV=development
      - PORT=3000
    env_file:
      - SECRETS/dev.env
    volumes:
      - ./common:/app/common
      - ./package.json:/app/package.json
      - ./babel.config.js:/app/babel.config.js
      - ./.eslintrc.js:/app/.eslintrc.js
      - ./tsconfig.json:/app/tsconfig.json
      - ./backend:/app/backend:rw
      - backend-deps:/app/node_modules
      - backend-nested-deps:/app/backend/node_modules
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - 3000:3000 # Sometimes only backend is needed. e.g. mobile app
  ############################################################################
  database:
    container_name: "MONO_DATABASE"
    image: mongo:4.2.8
    restart: always
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: prisma
    #   MONGO_INITDB_ROOT_PASSWORD: prisma
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
    volumes:
      - ~/mono/data/db:/data/db
    ports:
      - "27010:27017"
    command: --quiet
  ############################################################################
  redis:
    container_name: "MONO_REDIS"
    image: redis:5.0.6-alpine
    healthcheck:
      test: redis-cli ping
  # #############################################################################

  # - "traefik.http.routers.fe-router.middlewares=fe-auth"
  # - "traefik.http.middlewares.fe-auth.basicauth.users=test:"
  reverse-proxy:
    container_name: "MONO_TRAEFIK"
    image: "traefik:v2.0.2"
    volumes:
      # - "./acme.json:/acme.json"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik/traefik.toml:/etc/traefik/traefik.toml"
    ports:
      - "80:8090" # PROXY ENTRYPOINT
      - "443:443" # PROXY ENTRYPOINT
      - "8080:8080" # TRAEFIK DASHBOARD
  # #############################################################################
volumes:
  frontend-deps:
  frontend-nested-deps:
  backend-deps:
  backend-nested-deps:
