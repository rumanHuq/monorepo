enum RideStatus {
  ACCEPTED
  FINISHED
  CANCELED
  REQUESTING
  ON_ROUTE
}

type PickupInfo {
  lat: Float!
  lng: Float!
  address: String!
}

type DropOffInfo {
  lat: Float!
  lng: Float!
}

type RideOutput {
  _id: ID
  createdAt: String!
  updatedAt: String
  status: RideStatus!
  pickupInfo: PickupInfo!
  dropOffInfo: DropOffInfo!
  price: Float!
  duration: String!
  distance: String!
  driver: ID
  passenger: ID!
  chat: ID
}

type Ride @entity {
  _id: ID! @id
  createdAt: String! @column(overrideType: "Date")
  updatedAt: String @column(overrideType: "Date")
  status: RideStatus! @column
  pickupInfo: PickupInfo! @column
  dropOffInfo: DropOffInfo! @column
  price: Float! @column
  duration: String! @column
  distance: String! @column
  driver: User @link
  passenger: User! @link
  chat: Chat @link
}


input PickupInput {
  lat: Float!
  lng: Float!
  address: String!
}

input DropOffInput {
  lat: Float!
  lng: Float!
}

extend type Mutation {
  RIDE_REQUEST_BY_PASSENGER(pickupInfo: PickupInput!, dropOffInfo: DropOffInput!, price: Float!, duration: String!, distance: String!): RideOutput!
  RIDE_UPDATE_STATUS_BY_DRIVER(rideId: String! ,status: RideStatus!): Boolean!
}

extend type Query {
  RIDE_GET_NEARBY_DRIVER: RideOutput
  RIDE_GET_INFORMATION(rideId: String!): RideOutput
}

extend type Subscription {
  RIDE_PASSENGER_BROADCAST: RideOutput
  RIDE_STATUS_UPDATE_BY_DRIVER: RideOutput
}
